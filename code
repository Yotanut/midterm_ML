library(shiny)
library(shinythemes)
library(data.table)
library(RCurl)
library(randomForest)
library(caret)
library(DT)


setwd("C:/Users/ASUS/Desktop/ปี2เทอม2/ML/midterm/learning data")
dat<-read.csv("dat2.csv")
dat3<-read.csv("dat3.csv")
dat$grade<-recode(dat$grade,
                  'A'= 'No',
                  'B+'='No',
                  'B'='No',
                  'C+'='No',
                  'C'='No',
                  'D'='Withdraw',
                  'D+'='Withdraw')
dat<-dat[c(2,3,4,6)]
head(dat)
summary(dat)
table(dat$grade)
#dat$midterm<-factor(dat$midterm)
#dat$attendance<-factor(dat$attendance)
#dat$homeworks<-factor(dat$homeworks)
dat$grade<-factor(dat$grade)
#model <- randomForest(grade ~ ., data = dat, ntree = 500, mtry = 4, importance = TRUE)

glimpse(dat)
# Build model
model <- randomForest(grade~ ., data = dat ,type = "response")

# Save model to RDS file
saveRDS(model, "model.rds")

# Read in the RF model
model <- readRDS("model.rds")

####################################
# User interface                   #
####################################

ui <- fluidPage(theme = shinytheme("cerulean"),
                navbarPage(
                  "Withdraw?",
                  tabPanel("Predict",
                           sidebarPanel(
                             sliderInput("mid", "Midterm:",
                                         min = 0, max = 25,
                                         value = 15),
                             sliderInput("att", "Attendance:",
                                         min = 0, max = 5,
                                         value = 3),
                             sliderInput("hom", "Homeworks:", 
                                         min = 0, max = 5,
                                         value = 3),
                             
                             actionButton("submitbutton", "Submit", class = "btn btn-primary")
                           ),
                           
                           mainPanel(
                             tags$label(h3('result')), # Status/Output Text Box
                             verbatimTextOutput('contents'),
                             textOutput('textdata') # Prediction results table
                             
                           ),
                  ), # Navbar 1, tabPanel
                  tabPanel("Score", 
                           sidebarPanel(
                             textInput("ID", "Your ID:"),
                             actionButton("submitbutton", "Submit", class = "btn btn-primary")
                             
                           ),
                           mainPanel(
                             tags$label(h3('Your score')), # Status/Output Text Box
                             p(datatable(dat3, escape = 5)),  
                             p(h3('Overall')),
                             tableOutput('score1'), 
                             plotOutput("distPlot", height="500px", width = "80%",)
                           )
                           )
                ) # navbarPage
) # fluidPage
####################################
# Server                           
####################################


server <- function(input, output, session) {
  # Input Data
  datasetInput <- reactive({  
    data.frame(
      "midterm" = input$mid,
      "attendance" = input$att,
      "homeworks" = input$hom,
      stringsAsFactors = FALSE)})
  
  resultpred<-reactive({predict(model, datasetInput())})    
  
  # Status/Output Text Box
  output$contents <- renderText({
    if (input$submitbutton>0) { 
      isolate("Calculation complete.") 
    } else {
      return("Server is ready for calculation.")
    }
  })
  
  #output$table
  # Prediction results table
  output$textdata <- renderText({
    if (input$submitbutton>0) { 
      isolate(paste(resultpred())) 
    } 
  })
  
  ###score
  output$score1 <- renderTable({
    if (input$submitbutton>0) { 
      isolate(datatable(dat3$ID)) 
    } 
  })
  
  output$distPlot <- renderPlot({
    ggplot(dat3, aes(x=mid))+geom_histogram(color="darkblue", fill="lightblue",binwidth=2)+
      labs(title="Midterm",x="scores", y = "Count")
  })

  
  output$score1 <- renderTable({
    avr.mid<-data.frame(
    "mean" = 17.62,
    "max" = 23.50,
    "min" = 8.50,
    "SD" = 3.65,
    stringsAsFactors = FALSE)
  })
  
}

####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
